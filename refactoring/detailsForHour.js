const axios = require('axios');

const getHourlyForecast = async (city, API_KEY, date) => {
    try {
        const response = await axios.get('https://api.openweathermap.org/data/2.5/forecast', {
            params: {
                q: city,
                appid: API_KEY,
                units: 'metric'
            }
        });

        if (response.status === 200) {
            const forecastData = response.data;
            const hourlyForecasts = forecastData.list.filter(item => {
                const itemDate = new Date(item.dt * 1000);
                const forecastDate = itemDate.toISOString().split('T')[0];
                return forecastDate === date;
            });
            let forecastMessage = '';
            hourlyForecasts.forEach(forecast => {
                const time = new Date(forecast.dt * 1000).toLocaleTimeString();
                const temperature = forecast.main.temp;
                const description = forecast.weather[0].description;
                forecastMessage += `–ß–∞—Å: ${time}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature.toFixed(1)}¬∞Cüå°Ô∏è\n–û–ø–∏—Å: ${description}\n\n`;
            });
            return forecastMessage;
        } else {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ:', error);
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
};

module.exports = { getHourlyForecast };
